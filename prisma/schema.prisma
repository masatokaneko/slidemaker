// üî¥ ÊúÄÈ´òÂÑ™ÂÖàÂ∫¶: Prisma„Çπ„Ç≠„Éº„ÉûÂÆöÁæ©

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  email         String    @unique
  password      String?
  role          String    @default("user")
  avatar        String?
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  templates     Template[]
  templateUsage TemplateUsage[]
  files         File[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  description String?
  yamlData    String?  @map("yaml_data")
  tags        String[]
  userId      String   @map("user_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  slides Slide[]
  files  File[]
  templateUsage TemplateUsage[]

  @@map("projects")
}

model Slide {
  id         String   @id @default(uuid()) @db.Uuid
  projectId  String   @map("project_id") @db.Uuid
  title      String
  content    Json?
  slideOrder Int      @map("slide_order")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("slides")
}

model Template {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  description String?
  category    String
  industry    String
  yamlData    String   @map("yaml_data")
  thumbnail   String?
  isPublic    Boolean  @default(false) @map("is_public")
  featured    Boolean  @default(false)
  userId      String   @map("user_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  usage TemplateUsage[]

  @@map("templates")
}

model TemplateUsage {
  id         String   @id @default(uuid()) @db.Uuid
  templateId String   @map("template_id") @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  projectId  String?  @map("project_id") @db.Uuid
  usedAt     DateTime @default(now()) @map("used_at")

  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project  Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@map("template_usage")
}

model File {
  id           String   @id @default(uuid()) @db.Uuid
  filename     String
  originalName String   @map("original_name")
  mimeType     String   @map("mime_type")
  size         Int
  url          String
  userId       String   @map("user_id") @db.Uuid
  projectId    String?  @map("project_id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at")

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@map("files")
}

model DesignPattern {
  id          String   @id @default(cuid())
  name        String
  layoutJson  Json      // element bbox, zIndex
  paletteJson Json      // color palette
  fontFamily  String
  createdAt   DateTime @default(now())
  pdfHash     String    // Âêå‰∏Ä PDF „ÅÆÈáçË§áÁôªÈå≤Èò≤Ê≠¢
  @@unique([pdfHash])
}

model DesignComponent {
  id          String   @id @default(cuid())
  type        String
  json        Json
  name        String
  sourcePdfId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  versions    ComponentVersion[]
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?

  @@index([type])
  @@index([sourcePdfId])
  @@index([categoryId])
}

model ComponentVersion {
  id          String   @id @default(cuid())
  component   DesignComponent @relation(fields: [componentId], references: [id])
  componentId String
  version     Int
  json        Json
  createdAt   DateTime @default(now())
  createdBy   String

  @@unique([componentId, version])
  @@index([componentId])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  components  DesignComponent[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name])
}

model Job {
  id        String   @id @default(cuid())
  type      String   // "pdf_analysis" | "slide_generation"
  status    String   // "PENDING" | "PROCESSING" | "SUCCESS" | "FAILED"
  result    Json?    // Âá¶ÁêÜÁµêÊûú
  error     String?  // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
